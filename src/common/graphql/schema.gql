# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Category {
  id: String!
  name: String!
}

type Image {
  id: String!
  isThumbnail: Boolean!
  imageURLs: String!
  course: Course!
}

type SpecificSchedule {
  id: String!
  courseStartTime: DateTime!
  courseEndTime: DateTime!
  maxUsers: Int!
  reservedPerson: Int!
  recruitmentStartDate: DateTime!
  recruitmentEndDate: DateTime!
  courseDate: CourseDate!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type CourseDate {
  id: String!
  courseDay: DateTime!
  course: Course!
  specificSchedule: [SpecificSchedule!]!
}

type Material {
  id: String!
  materials: String!
  course: [Course!]!
}

type Course {
  id: String!
  name: String!
  maxPrice: Int!
  minPrice: Int!
  difficulty: String!
  contents: String!
  openingDate: DateTime!
  closingDate: DateTime!
  address: String!
  addressDetail: String!
  zipCode: String!
  host: User!
  imageURLs: [Image!]!
  lat: Float
  lng: Float
  category: Category
  pick: Int!
  courseDate: [CourseDate!]!
  materials: [Material!]!
}

type User {
  id: String!
  email: String!
  nickname: String!
  phone: String
  point: Int!
  isHost: Boolean!
  account: String
  bank: String
  businessName: String
  businessNumber: String
  birth: DateTime
  gender: Boolean
  profileImageURL: String!
  marketingAgreement: Boolean!
}

type Pick {
  id: String!
  course: Course!
  user: User!
}

type Review {
  id: String!
  score: Float!
  content: String!
  url: String!
  course: Course!
  writer: User!
}

type Payment {
  id: String!
  status: PAYMENT_STATUS_ENUM!
  createdAt: DateTime!
  price: Int!
  quantity: Int!
  amount: Int!
  impUid: String
  course: Course!
  user: User!
  specificSchedule: SpecificSchedule!
}

enum PAYMENT_STATUS_ENUM {
  PAYMENT
  CANCEL
}

type Query {
  fetchUsers: [User!]!
  fetchUser(id: String!): User!
  fetchLoginUser: User!
  fetchCourse(courseId: String!): Course!
  fetchCoursesSortBycreated(search: String = "", page: Float = 1): [Course!]
  fetchCoursesSortByPick(search: String = "", page: Float = 1): [Course!]
  fetchCoursesSortByDiscount(search: String = "", page: Float = 1): [Course!]
  hotCourses: [Course!]!
  newCourses: [Course!]!
  cheapCourses: [Course!]!
  fethchCourseDate(courseDateId: String!): CourseDate!
  fetchSpecificSchedule: SpecificSchedule!
  fetchPicks: [Pick!]!
  fetchPicksByUser(userID: String!): [String!]!
  fetchPayments: [Payment!]!
  fetchPayment(email: String!): Payment!
}

type Mutation {
  createReview(score: Float!, content: String!, created_At: DateTime!, url: String!): Review!

  """이메일 중복을 체크하는 api, 이메일이 중복이면 false, 중복이아니면 true 또한, 이메일이 올바른 양식인지도 판별함"""
  checkEmail(email: String!): Boolean!

  """
  핸드폰 중복을 체크하는 api, 핸드폰번호가 중복이면 false, 중복이아니면 true 또한, 핸드폰 번호가 올바른 양식인지도 판별함
  """
  checkPhone(phone: String!): Boolean!

  """닉네임 중복을 체크하는 api, 닉네임이 중복이면 false, 중복이아니면 true"""
  checkNickname(nickname: String!): Boolean!
  createUser(createUserInput: CreateUserInput!): User!
  sendTokenToPhone(phone: String!): String!
  authPhoneOk(phone: String!, inputToken: String!): Boolean!
  updateUser(email: String!, updateUserInput: UpdateUserInput!): User!

  """유저가 마이페이지에서 비밀번호를 변경하는 api, 기존 비밀번호를 체크 후에 새 비밀번호를 양식에 따라 입력받는다."""
  updatePassword(newPassword: String!, inputPassword: String!): Boolean!

  """회원탈퇴 api,로그인된 유저가 비밀번호 체크 후에 유저삭제"""
  deleteLoginUser(inputPassword: String!): Boolean!

  """핸드폰을 입력받고 인증절차 진행"""
  forgotPasswordSendToken(phone: String!): String!

  """유저에게 핸드폰 인증을 완료 받으면 이메일을 리턴함."""
  forgotPasswordAuthPhoneOk(phone: String!, inputToken: String!): String!

  """휴대폰인증 완료시 비밀번호 변경 api"""
  forgotPasswordUpdate(newPassword: String!, email: String!): String!
  login(email: String!, password: String!): String!
  hostLogin(email: String!, password: String!): String!
  restoreAccessToken: String!
  logout: String!
  uploadFile(files: [Upload!]!): [String!]!
  createCategory(name: String!): Category!
  createCourse(createCourseInput: CreateCourseInput!): Course!
  updateCourse(courseId: String!, updateCourseInput: UpdateCourseInput!): Course!
  deleteCourse(courseId: String!): Boolean!
  createCourseDate(courseDate: DateTime!, courseId: String!): CourseDate!
  createSpecificSchedule(createSpecificScheduleInput: CreateSpecificScheduleInput!): SpecificSchedule!
  updateSpecificSchedule(specificScheduleId: String!, updateSpecificScheduleInput: UpdateSpecificScheduleInput!): SpecificSchedule!
  deleteSpecificSchedule(specificScheduleId: String!): Boolean!
  togglePick(createPickInput: CreatePickInput!): Boolean!
  createPayment(createPaymentInput: CreatePaymentInput!): Payment!
  cancelPayment(impUid: String!): Boolean!
}

input CreateUserInput {
  isHost: Boolean!
  email: String!
  password: String!
  nickname: String!
  phone: String!
  marketingAgreement: Boolean!
  account: String
  bank: String
  businessName: String
  businessNumber: String
}

input UpdateUserInput {
  isHost: Boolean
  email: String
  password: String
  nickname: String
  phone: String
  marketingAgreement: Boolean
  account: String
  bank: String
  businessName: String
  businessNumber: String
  gender: Boolean
  birth: DateTime
  profileImageURL: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input CreateCourseInput {
  name: String!
  maxPrice: Int!
  minPrice: Int!
  address: String!
  addressDetail: String!
  zipCode: String!
  difficulty: String!
  materials: [String!]
  contents: String!
  openingDate: DateTime!
  closingDate: DateTime!
  imageURLs: [String!]
  category: String!
  lat: Float
  lng: Float
}

input UpdateCourseInput {
  name: String
  maxPrice: Int
  minPrice: Int
  address: String
  addressDetail: String
  zipCode: String
  difficulty: String
  materials: [String!]
  contents: String
  openingDate: DateTime
  closingDate: DateTime
  imageURLs: [String!]
  category: String
  lat: Float
  lng: Float
}

input CreateSpecificScheduleInput {
  courseStartTime: DateTime!
  courseEndTime: DateTime!
  maxUsers: Int!
  recruitmentStartDate: DateTime!
  recruitmentEndDate: DateTime!
}

input UpdateSpecificScheduleInput {
  courseStartTime: DateTime
  courseEndTime: DateTime
  maxUsers: Int
  recruitmentStartDate: DateTime
  recruitmentEndDate: DateTime
}

input CreatePickInput {
  user: String!
  course: String!
}

input CreatePaymentInput {
  userId: String!
  impUid: String
  price: Int!
  quantity: Int!
  amount: Int!
  courseId: String!
  scheduleId: String!
}