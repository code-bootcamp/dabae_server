# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: String!
  email: String!
  nickname: String!
  phone: String
  gender: String
  isHost: Boolean!
  account: String
  bank: String
  businessName: String
  businessNumber: String
  birth: DateTime
  marketingAgreement: Boolean!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type CourseAddress {
  id: String!
  address: String!
  addressDetail: String!
  zipCode: String!
  lat: Float!
  lng: Float!
}

type MainCategory {
  id: String!
}

type SubCategory {
  id: String!
  mainCategory: MainCategory!
}

type Course {
  id: String!
  name: String!
  maxPrice: Int!
  minPrice: Int!
  difficulty: String!
  materials: String!
  contents: String!
  openingDate: DateTime!
  closingDate: DateTime!
  subCategory: SubCategory
  pick: Int!
}

type Pick {
  id: String!
  course: Course!
  user: User!
}

type Review {
  id: String!
  score: Float!
  content: String!
  url: String!
}

type SpecificSchedule {
  id: String!
  courseStartTime: DateTime!
  courseEndTime: DateTime!
  maxUsers: Int!
  reservedPerson: Int!
  RecruitmentStartDate: DateTime!
  RecruitmentEdnDate: DateTime!
  courseDate: CourseDate!
}

type CourseDate {
  id: String!
  courseDate: DateTime!
  course: Course!
  specificSchedule: SpecificSchedule!
}

type Query {
  fetchUsers: [User!]!
  fetchUser(id: String!): User!
  hasEmail(email: String!): Boolean!
  fetchLoginUser: User!
  fetchCourse(courseId: String!): Course!
  fetchCourses: [Course!]!
  fethchCourseDate(courseDateId: String!): CourseDate!
  fetchCourseAddress(courseAddressId: String!): CourseAddress!
  fetchSpecificSchedule: SpecificSchedule!
  fetchPicks: [Pick!]!
}

type Mutation {
  createReview(score: Float!, content: String!, created_At: DateTime!, url: String!): Review!
  createUser(createUserInput: CreateUserInput!): User!
  sendTokenToPhone(phone: String!): String!
  authPhoneOk(phone: String!, inputToken: String!): String!
  updateUser(email: String!, updateUserInput: UpdateUserInput!): User!
  updatePassword(newPassword: String!): User!
  deleteUser(id: String!): Boolean!
  deleteLoginUser: Boolean!
  login(email: String!, password: String!): String!
  restoreAccessToken: String!
  logout: String!
  uploadFile(files: [Upload!]!): [String!]!
  createCourse(createCourseInput: CreateCourseInput!): Course!
  updateCourse(courseId: String!, updateCourseInput: UpdateCourseInput!): Course!
  deleteCourse(courseId: String!): Boolean!
  createCourseDate(courseDate: DateTime!, recruitmentStartDate: DateTime!, recruitmentEndDate: DateTime!): CourseDate!
  createCourseAddress(address: String!, addressDetail: String!, zipCode: String!, lat: Float!, lng: Float!): CourseAddress!
  createSpecificSchedule(createSpecificScheduleInput: CreateSpecificScheduleInput!): SpecificSchedule!
  updateSpecificSchedule(specificScheduleId: String!, updateSpecificScheduleInput: UpdateSpecificScheduleInput!): SpecificSchedule!
  deleteSpecificSchedule(specificScheduleId: String!): Boolean!
  createPick(createPickInput: CreatePickInput!): Pick!
}

input CreateUserInput {
  isHost: Boolean!
  email: String!
  password: String!
  nickname: String!
  phone: String!
  marketingAgreement: Boolean!
  account: String
  bank: String
  businessName: String
  businessNumber: String
}

input UpdateUserInput {
  isHost: Boolean
  email: String
  password: String
  nickname: String
  phone: String
  marketingAgreement: Boolean
  account: String
  bank: String
  businessName: String
  businessNumber: String
  gender: String
  birth: DateTime
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input CreateCourseInput {
  name: String!
  maxPrice: Int!
  minPrice: Int!
  address: String!
  addressDetail: String!
  zipCode: String!
  difficulty: String!
  materials: String!
  contents: String!
  openingDate: DateTime!
  closingDate: DateTime!
}

input UpdateCourseInput {
  name: String!
  maxPrice: Int!
  minPrice: Int!
  region: String!
  address: String!
  addressDetail: String!
  zipCode: String!
  difficulty: String!
  materials: String!
  contents: String!
  status: Boolean!
}

input CreateSpecificScheduleInput {
  id: String!
  courseStartTime: DateTime!
  courseEndTime: DateTime!
  maxUsers: Int!
  reservedPerson: Int!
  RecruitmentStartDate: DateTime!
  RecruitmentEdnDate: DateTime!
}

input UpdateSpecificScheduleInput {
  id: String
  courseStartTime: DateTime
  courseEndTime: DateTime
  maxUsers: Int
  reservedPerson: Int
  RecruitmentStartDate: DateTime
  RecruitmentEdnDate: DateTime
}

input CreatePickInput {
  user: String!
  course: String!
}